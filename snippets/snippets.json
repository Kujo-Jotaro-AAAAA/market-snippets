{
	"ImpPattern": {
		"prefix": "impPattern",
		"body": [
			"import pattern from '@/utils/pattern/index';",
		],
		"description": "引入校验正则库"
	},
	"ImpAuthElement": {
		"prefix": "impAuthElement",
		"body": [
			"import { authElement } from 'utils/AuthValidate';"
		],
		"description": "引入权限校验"
	},
	"ImpCTable": {
		"prefix": "ImpCTable",
		"body": [
			"import CommonTable from '@/components/common/CommonTable';"
		],
		"description": "引入默认table"
	},
	"ImpDebounce": {
		"prefix": "impDebounce",
		"body": [
			"import { autobind, debounce } from '@/utils/decorators';"
		],
		"description": "引入debounce"
	},
	"createAPI": {
		"prefix": "createAPI",
		"body": [
			"import requestMethod from '../fetch';",
			"import { isMock } from '../index';",
			"",
			"// 查询媒体列表",
			"const ${2:PROPERTY_LIST} = (params: any) => requestMethod('POST', '${1:/infoFlow/property/list}', params)",
			"export default {",
			"    ${2:PROPERTY_LIST}",
			"}"
		],
		"description": "createAPI 文件"
	},
	"createHOC": {
		"prefix": "createHOC",
		"body": [
			"import React, { Component } from 'react';",
			"import { observable, toJS } from 'mobx';",
			"import { observer, inject } from 'mobx-react';",
			"import { Button } from 'antd';",
			"import { autobind } from '@/utils/decorators';",
			"",
			"const HOC_Collect = (WrappedComponent: any) => {",
			"",
			"    @autobind",
			"    @observer",
			"    class HOC_Component extends Component {",
			"",
			"        // 工具函数",
			"",
			"        render() {",
			"            const { state } = this",
			"            return <WrappedComponent {...this.props} {...state} />",
			"        }",
			"    }",
			"    return HOC_Component",
			"}",
			"export default HOC_Collect;",
		],
		"description": "createHOC 文件"
	},
	"createForm": {
		"prefix": "createForm",
		"body": [
			"import React from 'react';",
			"import { observable, toJS } from 'mobx';",
			"import { observer, inject } from 'mobx-react';",
			"import { Button, Form, Input, Select } from 'antd';",
			"import { FormComponentProps } from 'antd/es/form';",
			"import { autobind } from '@/utils/decorators';",
			"const { Item } = Form;",
			"const { Option } = Select;",
			"// import classNames from './style/ResetPasswordPage.less';",
			"// 组件",
			"",
			"interface PropsTypes extends FormComponentProps {",
			"}",
			"",
			"@autobind",
			"@observer",
			"class ${1:AddWXNumber} extends React.Component<PropsTypes> {",
			"",
			"    componentDidMount() { }",
			"",
			"    // 处理函数",
			"",
			"    handleSubmit(e: any) {",
			"        e.preventDefault();",
			"",
			"    }",
			"",
			"    // 工具函数",
			"",
			"    render() {",
			"        const { getFieldDecorator } = this.props.form;",
			"",
			"        return (",
			"",
			"            <div>",
			"                <Form>",
			"                    <Form.Item",
			"                        label='微信公号ID'>",
			"                        {getFieldDecorator('key', {",
			"                            rules: [{",
			"                                required: true,",
			"                            },",
			"                            ],",
			"                            // initialValue: key",
			"                        })(",
			"                            <Input />",
			"                        )}",
			"                    </Form.Item>",
			"                </Form>",
			"                <Button>按钮</Button>",
			"            </div>",
			"        )",
			"    }",
			"}",
			"export default Form.create<FormComponentProps>({ name: '${1:AddWXNumberForm}' })(${1:AddWXNumber});"
		],
		"description": "创建 antd 表单组件"
	},
	"formItem": {
		"prefix": "formItem",
		"body": [
			"<Form.Item",
			"    wrapperCol={{ span: 16 }}",
			"    labelCol={{ span: 8 }}",
			"    label='$1'>",
			"    {getFieldDecorator('key', {",
			"        rules: [{",
			"            required: true,",
			"            message: '请输入$1',",
			"        },",
			"        {",
			"            pattern: pattern.intOrFloat, message: '请输入正确的数字',",
			"        }",
			"        ],",
			"        initialValue: key",
			"    })(",
			"        <Input placeholder='请输入$1' />",
			"    )}",
			"</Form.Item>"
		],
		"description": "formItem"
	},
	"__formVali": {
		"prefix": "__formVali",
		"body": [
			"this.$1.props.form.validateFields((err: any, fieldsValues: any) => {",
			"    if (!err) return;",
			"});"
		],
		"description": "表单校验"
	},
	"__request": {
		"prefix": "__request",
		"body": [
			"${1}({",
			"    applyNo: '1231231'",
			"}).then((res: ResponseInterface<ResponesType<${3}>>) => {",
			"    const { code, data } = res;",
			"    if (code === 2000) {",
			"        this.data = data;",
			"    }",
			"});"
		],
		"description": "请求方式"
	},
	"__Table": {
		"prefix": "__Table",
		"body": [
			"<CommonTable",
			"    pagination={{",
			"        position: 'bottom',",
			"        onShowSizeChange: this.onSizeChange,",
			"        onChange: this.onPageChange,",
			"        total: this.total,",
			"    }}",
			"    scroll={{ x: 'max-content', y: 0 }}",
			"    rowKey={(record: any) => record.adApplyNo}",
			"    columns={this.handleColumns()}",
			"    dataSource={toJS(this.tableData)}",
			"/>"
		],
		"description": "通用表格"
	},
	"__PageChange": {
		"prefix": "__PageChange",
		"body": [
			"/**",
			"* 改变每页显示的数量",
			"* @param current ",
			"* @param pageSize ",
			"*/",
			"onSizeChange(current: any, pageSize: number) {",
			"    this.queryParams.pageSize = pageSize;",
			"}",
			"/**",
			"* @param pageNum ",
			"*/",
			"//跳转至对应的页数 或者 点击对应的页数",
			"onPageChange(pageNum: number) {",
			"    this.queryParams.pageNum = pageNum;",
			"}"
		],
		"description": "页面改变处理"
	},
	"__asyncComponents": {
		"prefix": "__asyncComponents",
		"body": [
			"import { asyncComponent } from '@/utils/AsyncComponent/AsyncComponent';",
			"const $2 = asyncComponent(() => import(/* webpackChunkName: '$2' */ '$1'));",
		],
		"description": "异步导入"
	},
	"__TableTitle": {
		"prefix": "__TableTitle",
		"body": [
			"export const ${1}: TableColumnType[] = [",
			"    {",
			"        title: '任务编号',",
			"        dataIndex: 'applyName',",
			"        width: 100,",
			"    },",
			"]"
		],
		"description": "通用表格Clumn"
	},
	"__Modal": {
		"prefix": "__Modal",
		"body": [
			"<Modal ",
			"    title='${1}'",
			"    visible={this.props.modalVisible}",
			"    destroyOnClose",
			"    width='$2%'",
			"    okText='确定'",
			"    cancelText='取消'",
			"    onOk={this.handleSubmit}",
			"    onCancel={this.handleCloseModal}",
			">",
			"</Modal>"
		],
		"description": "生成 antd 模态框"
	},
	"create to ReactPage": {
		"prefix": "createReact",
		"body": [
			"import React from 'react';",
			"import { observable, toJS } from 'mobx';",
			"import { observer, inject } from 'mobx-react';",
			"import { Button } from 'antd';",
			"import { autobind } from 'core-decorators';",
			"import { GlobalTypes } from '@/store/index';",
			"// import classNames from './style/ResetPasswordPage.less';",
			"// 组件",
			"",
			"interface PropsTypes {",
			"",
			"}",
			"",
			"// @inject('DALInfoFlowState')",
			"",
			"@autobind",
			"@observer",
			"export default class ${1:componentName} extends React.Component<PropsTypes & GlobalTypes> {",
			"    @observable lists: Array<object> = []; // 说明",
			"    @observable item: object = {}; // 说明",
			"",
			"    componentDidMount() { }",
			"",
			"    // 处理函数",
			"",
			"    handleMethods() {",
			"",
			"    }",
			"",
			"",
			"    render() {",
			"        return (",
			"            <div>",
			"                <Button>按钮</Button>",
			"            </div>",
			"        )",
			"    }",
			"}"
		],
		"description": "createReactModol"
	}
}